import Sofa
import math
import os

path = os.path.dirname(os.path.abspath(__file__))+'/mesh/'

def createScene(rootNode):

		rootNode.createObject('RequiredPlugin', pluginName='CGALPlugin')
		node = rootNode.createChild('node')
		node.createObject('MeshSTLLoader',name='mesh',filename=path+'pneunetCut.stl')
	  	node.createObject('MeshGenerationFromPolyhedron',name='gen',template='Vec3d',inputPoints='@mesh.position', inputTriangles='@mesh.triangles',drawTetras='1',
				                cellSize="1",

								facetAngle="30",

								# This parameter provides an upper bound for the radii of the surface Delaunay ball; a larger value may lead to larger tetrahedra.
								facetSize="0.8",

								# This parameter controls the shape of mesh cells. Actually, it is an upper bound for the ratio between the circumradius of a mesh
								# tetrahedron and its shortest edge. There is a theoretical bound for this parameter: the Delaunay refinement process is guaranteed
								# to terminate for values larger than 2.
								cellRatio="2",   #Convergence problem if < 2

								# The approximation error between the boundary and the subdivision surface. It provides an upper bound for the distance
								# between the circumcenter of a surface facet and the center of a surface Delaunay ball of this facet.
								facetApproximation="0.1"
								)

		node.createObject('Mesh', position='@gen.outputPoints', tetrahedra='@gen.outputTetras')
		node.createObject('VTKExporter', filename=path+'example', edges='0', tetras='1', exportAtBegin='1')
		node.createObject('OglModel', src="@mesh", color="0.0 0.7 0.7 0.5")
		return rootNode
