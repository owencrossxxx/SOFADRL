############################################################################

# Soft Robotics Lab, Oxford Uni.
# Template for simulating pneumatic actuator on Sofa

# Wenye Ouyang (Owen)
# wenye@robots.ox.ac.uk
# Last review date: 20/4/2020

############################################################################

import Sofa
import math
import os
#import a floor from soft robot template library
from stlib.physics.rigid import Floor

density = 1.14
#volume =
#mass=denaity*volume

path = os.path.dirname(os.path.abspath(__file__))

#Create a scene
def createScene(rootNode):


        #Display options
        rootNode.createObject('VisualStyle', displayFlags='showVisualModels showBehaviorModels hideCollisionModels hideBoundingCollisionModels showForceFields showInteractionForceFields hideWireframe')

        #load plugins
        rootNode.createObject('RequiredPlugin', name='SoftRobots', pluginName='SoftRobots')
        rootNode.createObject('RequiredPlugin', name='SofaPython', pluginName='SofaPython')

        #Define gravity along three axis
        rootNode.findData('gravity').value='-9810 0 0';
        rootNode.createObject('PythonScriptController', filename="controller/Controller.py", classname="controller")
        rootNode.createObject('FreeMotionAnimationLoop')
        rootNode.createObject('GenericConstraintSolver', tolerance="1e-12", maxIterations="10000")

        #Load a floor in the scene
        Floor(rootNode, translation=[0,30,30], rotation = [0,0,90] , isAStaticObject=True)

        #Load the actuator
        pneu = rootNode.createChild('pneu')
        pneu.createObject('EulerImplicit', name='odesolver', rayleighStiffness='0.1', rayleighMass='0.1')
        pneu.createObject('SparseLDLSolver', name='directSolver')

        #It has to be a file with volumetric mesh
        #Recommend CGAL/gmsh
        #More details can be found in tutorial "Mesh generation"
        pneu.createObject('MeshVTKLoader', name='loader', filename='data/mesh/T50.vtu',translation=[100,0,0], rotation = [0,-90,0])
        pneu.createObject('Mesh', src='@loader', name='container')

        #Specify mesh type, in this example we use tetrahedra
        pneu.createObject('MechanicalObject', name='tetras', template='Vec3d', showObject='0', showObjectScale='0')

        #Speficy mechanical properties
        pneu.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.3',  youngModulus='33.08', drawAsEdges="true")
        pneu.createObject('UniformMass', totalMass='0.00002054')
        #pneu.createObject('UniformMass', totalMass = mass)

        #Define stiff layer
        pneu.createObject('BoxROI', name='boxROISubTopo', box='72 -5 -10 78 70 70', drawBoxes='0')
        modelSubTopo = pneu.createChild('modelSubTopo')
        modelSubTopo.createObject('Mesh', position='@loader.position', tetrahedra="@boxROISubTopo.tetrahedraInROI", name='container')
        modelSubTopo.createObject('TetrahedronFEMForceField', template='Vec3d', name='FEM', method='large', poissonRatio='0.3',  youngModulus='150000')

        #Define boundry layer
        pneu.createObject('BoxROI', name='boxROI', box='3 -5 -10 8 70 70', drawBoxes= '0')
        pneu.createObject('RestShapeSpringsForceField', points='@boxROI.indices', stiffness='1e12', angularStiffness='1e12')
        pneu.createObject('LinearSolverConstraintCorrection', solverName='directSolver')

        #Define the cavity inside the chambers
        cavity = pneu.createChild('cavity')
        cavity.createObject('MeshSTLLoader', name='cavityLoader', filename='data/mesh/T5Cav.STL', translation=[100,1,1], rotation = [0,-90,0])
        cavity.createObject('Mesh', src='@cavityLoader', name='cavityMesh')
        cavity.createObject('MechanicalObject', name='cavity')
        cavity.createObject('SurfacePressureConstraint', name="SurfacePressureConstraint", template='Vec3d', value="0", triangles='@cavityMesh.triangles', drawPressure='1',drawScale='0.0002',  valueType="pressure")
        cavity.createObject('BarycentricMapping', name='mapping', mapForces='false', mapMasses='false')


        #OPTIONAL: Create a visual model for the actuators

        #modelVisu = pneu.createChild('visu')
        #modelVisu.createObject('MeshSTLLoader', name="loader", filename="data/mesh/T5.stl")
        #modelVisu.createObject('OglModel', src="@loader", template='ExtVec3f', color='0.7 0.7 0 0.6',translation=[0,0,0], rotation = [0,0,0])
        #modelVisu.createObject('BarycentricMapping')
